// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  profile      Profile?
  subscribers  Subscriber[]
  timeEntries  TimeEntry[]  @relation("UserTimeEntries")
  activityLogs ActivityLog[]

  @@map("users")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  profiles     Profile[]
  subscribers  Subscriber[]
  timeEntries  TimeEntry[]  @relation("CompanyTimeEntries")
  activityLogs ActivityLog[]

  @@map("companies")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  companyId String?  @map("company_id")
  fullName  String?  @map("full_name")
  role      String?  @default("employee")
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Subscriber {
  id               String    @id @default(cuid())
  userId           String?   @map("user_id")
  companyId        String?   @map("company_id")
  email            String    @unique
  stripeCustomerId String?   @map("stripe_customer_id")
  subscribed       Boolean   @default(false)
  subscriptionTier String?   @map("subscription_tier")
  subscriptionEnd  DateTime? @map("subscription_end")
  employeeCount    Int?      @default(1) @map("employee_count")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("subscribers")
}

model TimeEntry {
  id              String    @id @default(cuid())
  userId          String?   @map("user_id")
  companyId       String?   @map("company_id")
  projectName     String?   @map("project_name")
  description     String?
  startTime       DateTime  @map("start_time")
  endTime         DateTime? @map("end_time")
  durationMinutes Int?      @map("duration_minutes")
  isActive        Boolean?  @default(false) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user    User?    @relation("UserTimeEntries", fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation("CompanyTimeEntries", fields: [companyId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model ActivityLog {
  id                String   @id @default(cuid())
  userId            String?  @map("user_id")
  companyId         String?  @map("company_id")
  activityType      String   @map("activity_type")
  applicationName   String?  @map("application_name")
  windowTitle       String?  @map("window_title")
  url               String?
  screenshotUrl     String?  @map("screenshot_url")
  timestamp         DateTime @default(now())
  productivityScore Int?     @map("productivity_score")

  // Relations
  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}
